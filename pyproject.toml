[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ipython2cwl"
dynamic = ["version"]
description = "Convert IPython Jupyter Notebooks to CWL tool"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.6"
authors = [
    { name = "Yannis Doukas", email = "giannisdoukas2311@gmail.com" },
]
keywords = [
    "jupyter",
    "cwl",
    "workflow",
    "reproducible",
    "science",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Framework :: IPython",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Medical Science Apps."
]
dependencies = [
    "nbformat>=5.0.6",
    "astor>=0.8.1",
    "PyYAML>=5.3.1",
    "gitpython>=3.1.3",
    "jupyter-repo2docker>=0.11.0",
    "nbconvert>=6.4.4",
    "ipython>=7.15.0",
]

[project.optional-dependencies]
test = [
    "pytest>=6.0",
    "pytest-cov",
    "pytest-mock",
    "coverage[toml]",
    "cwltool",
    "numpy",
    "pandas", 
    "matplotlib",
]
dev = [
    "black",
    "flake8", 
    "isort",
    "mypy",
    "pre-commit",
    "ruff>=0.0.243",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "myst-parser",
]
all = [
    "ipython2cwl[test,dev,docs]",
]

[project.urls]
Homepage = "https://ipython2cwl.readthedocs.io/"
Documentation = "https://ipython2cwl.readthedocs.io/"
Repository = "https://github.com/common-workflow-language/ipython2cwl"
Issues = "https://github.com/common-workflow-language/ipython2cwl/issues"

[project.scripts]
jupyter-repo2cwl = "ipython2cwl.repo2cwl:repo2cwl"

[tool.hatch.version]
path = "ipython2cwl/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/ipython2cwl",
    "/tests",
    "/examples",
    "/docs",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["ipython2cwl"]

# Include template files
[tool.hatch.build.targets.wheel.sources]
"ipython2cwl/templates" = "ipython2cwl/templates"

# Hatch environments for development
[tool.hatch.envs.default]
features = ["test"]
dev-mode = true

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-no-docker = "pytest {args:tests}"
test-cov = "pytest --cov=ipython2cwl --cov-report=term-missing {args:tests}"
test-cov-xml = "pytest --cov=ipython2cwl --cov-report=xml --cov-report=term-missing {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov-xml = [
    "- coverage combine",
    "coverage xml",
]
cov-html = [
    "- coverage combine", 
    "coverage html",
]

[tool.hatch.envs.lint]
detached = true
features = ["dev"]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:ipython2cwl tests}"
style = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.hatch.envs.docs]
features = ["docs"]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build docs docs/_build"
serve = "python -m http.server -d docs/_build"

# Testing configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore:pythonjsonlogger.jsonlogger has been moved to pythonjsonlogger.json:DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["ipython2cwl"]
branch = true
omit = [
    "ipython2cwl/__about__.py",
    "*/tests/*",
]

[tool.coverage.paths]
ipython2cwl = ["ipython2cwl", "*/ipython2cwl/ipython2cwl"]
tests = ["tests", "*/ipython2cwl/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Black code formatting
[tool.black]
target-version = ["py38"]
line-length = 88
skip-string-normalization = true

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

# Ruff linting
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F", 
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.isort]
known-first-party = ["ipython2cwl"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

# MyPy type checking
[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true